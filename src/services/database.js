// Generated by CoffeeScript 1.10.0
(function() {
  var Firebase, Promise, R, Rx, addId, base, defaultTo, dot, getSnapshot, getStatus, getTeamId, getUserBackDateTimeRef, getUserBackRef, getUserId, getUserRef, getUserStateRef, getUserStatusRef, getValue, getValueWithDefault, log, makeUserObject, setValue, snapshotToValue, teams;

  Firebase = require('firebase');

  Promise = require('promise');

  R = require('ramda');

  Rx = require('rx');

  dot = require('../misc/helpers').dot;

  log = require('../misc/util').log;

  base = new Firebase('https://werebot.firebaseio.com/');

  teams = base.child('teams');


  /* PRIVATE */

  getTeamId = dot('team');

  getUserId = dot('user');

  getStatus = dot('status');

  getUserRef = function(message) {
    return teams.child(getTeamId(message)).child('users/' + getUserId(message));
  };

  getUserStateRef = function(message) {
    return getUserRef(message).child('state');
  };

  getUserStatusRef = function(message) {
    return getUserRef(message).child('status');
  };

  getUserBackRef = function(message) {
    return getUserRef(message).child('back');
  };

  getUserBackDateTimeRef = function(message) {
    return getUserRef(message).child('backDateTime');
  };

  getSnapshot = function(ref) {
    return ref.once('value');
  };

  snapshotToValue = function(snapshot) {
    return snapshot.val();
  };

  getValue = R.pipeP(getSnapshot, snapshotToValue);

  addId = function(value, message) {
    return R.merge(value, {
      id: getUserId(message)
    });
  };

  defaultTo = R.curry(function(defaultValue, val) {
    if (val == null) {
      return defaultValue;
    } else {
      return val;
    }
  });

  getValueWithDefault = function(defaultValue) {
    return R.pipeP(getValue, defaultTo(defaultValue));
  };

  setValue = function(value, ref) {
    return ref.set(value);
  };

  makeUserObject = function(userId, snapshot) {
    var user;
    user = {};
    user[userId] = snapshot.val();
    return user;
  };


  /* PUBLIC */

  exports.getUser = R.pipe(getUserRef, getValue);

  exports.getUserState = R.pipe(getUserStateRef, getValueWithDefault('idle'));

  exports.getUserStatus = R.pipe(getUserStatusRef, getValue);

  exports.getUserBack = R.pipe(getUserBackRef, getValue);

  exports.setUserState = function(message, state) {
    return setValue(state, getUserStateRef(message));
  };

  exports.setUserBack = function(message, state) {
    return setValue(state, getUserBackRef(message));
  };

  exports.setUserStatus = function(message, state) {
    return setValue(state, getUserStatusRef(message));
  };


  /* TEST */


  /*
  message =
    user: 'U036HR7S2'
    team: 'T02FHSL18'
  
   * log addId status: 'fisk', message
  
  exports.getUserStatus(message)
  .then log
   */

}).call(this);
