// Generated by CoffeeScript 1.10.0
(function() {
  var Firebase, Promise, R, Rx, addId, base, defaultTo, dot, getChild, getSnapshot, getStatus, getTeamId, getUserBackDateTimeRef, getUserBackRef, getUserId, getUserRef, getUserStateRef, getUserStatusRef, getValue, getValueWithDefault, log, makeUserObject, message, setValue, snapshotToValue, teams;

  Firebase = require('firebase');

  Promise = require('promise');

  R = require('ramda');

  Rx = require('rx');

  dot = require('../misc/helpers').dot;

  log = require('../misc/util').log;

  base = new Firebase('https://werebot.firebaseio.com/');

  teams = base.child('teams');


  /* PRIVATE */

  getTeamId = dot('team');

  getUserId = dot('user');

  getStatus = dot('status');

  getChild = R.curry(function(name, ref) {
    return ref.child(name);
  });

  getUserRef = function(message) {
    return teams.child(getTeamId(message)).child('users/' + getUserId(message));
  };

  getUserStateRef = R.pipe(getUserRef, getChild('state'));

  getUserStatusRef = R.pipe(getUserRef, getChild('status'));

  getUserBackRef = R.pipe(getUserRef, getChild('back'));

  getUserBackDateTimeRef = R.pipe(getUserRef, getChild('backDateTime'));


  /* PLAYGROUND */

  getSnapshot = function(ref) {
    return ref.once('value');
  };

  snapshotToValue = function(snapshot) {
    return snapshot.val();
  };

  addId = function(value, message) {
    return R.merge(value, {
      id: getUserId(message)
    });
  };

  getValue = R.pipeP(getSnapshot, snapshotToValue);

  getValueWithDefault = function(defaultValue) {
    return R.pipeP(getValue, defaultTo(defaultValue));
  };

  defaultTo = R.curry(function(defaultValue, val) {
    if (val == null) {
      return defaultValue;
    } else {
      return val;
    }
  });

  setValue = function(value, ref) {
    return ref.set(value);
  };

  makeUserObject = function(userId, snapshot) {
    var user;
    user = {};
    user[userId] = snapshot.val();
    return user;
  };


  /* PUBLIC */

  exports.getUser = R.pipe(getUserRef, getValue);

  exports.getUserState = R.pipe(getUserStateRef, getValueWithDefault('idle'));

  exports.getUserStatus = R.pipe(getUserStatusRef, getValue);

  exports.getUserBack = R.pipe(getUserBackRef, getValue);

  exports.setUserState = function(message, state) {
    return setValue(state, getUserStateRef(message));
  };

  exports.setUserBack = function(message, state) {
    return setValue(state, getUserBackRef(message));
  };

  exports.setUserStatus = function(message, state) {
    return setValue(state, getUserStatusRef(message));
  };


  /* TEST */

  message = {
    user: 'U036HR7S2',
    team: 'T02FHSL18'
  };

  exports.getUserBack(message).then(log);

}).call(this);
