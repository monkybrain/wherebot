// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, R, intents, log, parseEntities, processBundle, processIntent, queries, ref, ref1, replies, setUserState, setUserStatus;

  R = require('ramda');

  Promise = require('promise');

  log = require('../misc/util').log;

  ref = require('../services/database'), setUserStatus = ref.setUserStatus, setUserState = ref.setUserState;

  ref1 = require('./phrases'), replies = ref1.replies, queries = ref1.queries;

  intents = require('./intents').intents;


  /* PRIVATE */

  parseEntities = R.compose(R.map(R.prop('value')), R.map(R.nth(0)));

  processIntent = function(intent, message, entities) {
    if (intents[intent] != null) {
      return intents[intent](message, entities);
    } else {
      return console.error("intent not found");
    }
  };


  /* PUBLIC */

  processBundle = function(bundle) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var confidence, entities, intent, message, outcome, reply;
        message = bundle.message, outcome = bundle.outcome;
        intent = outcome.intent, confidence = outcome.confidence;
        entities = parseEntities(outcome.entities);
        if (confidence < 0.5 || intent === 'UNKNOWN') {
          reply = replies.intents.unknown;
        } else {
          reply = processIntent(intent, message, entities);
        }
        return resolve(R.merge(bundle, {
          reply: reply
        }));
      };
    })(this));
  };

  module.exports = {
    processBundle: processBundle
  };

}).call(this);
